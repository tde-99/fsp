#telegram username: @mrxbotx

import random
from bot import Bot
from plugins.FORMATS import *
from plugins.FORMATS import CLEAR_USERS_TXT
from config import OWNER_ID, PICS
from pyrogram.enums import ParseMode
from plugins.advance_features import convert_time
from database.database import *
from pyrogram.types import Message,ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, ReplyKeyboardRemove
from pyrogram.enums import ChatAction
# Define these variables if not already defined
on_txt = "üü¢ E…¥·¥Ä ô ü·¥á·¥Ö"
off_txt = "üî¥ D…™s·¥Ä ô ü·¥á·¥Ö"

    
async def fileSettings(getfunc, setfunc=None, delfunc=False) :
    btn_mode, txt_mode, pic_mode = '‚ùå', off_txt, off_pic
    del_btn_mode = 'E…¥·¥Ä ô ü·¥á M·¥è·¥Ö·¥á ‚úÖ'
    try:
        if not setfunc:
            if await getfunc():
                txt_mode = on_txt    
                btn_mode = '‚úÖ'
                del_btn_mode = 'D…™s·¥Ä ô ü·¥á M·¥è·¥Ö·¥á ‚ùå'
        
            return txt_mode, (del_btn_mode if delfunc else btn_mode)
            
        else:
            if await getfunc():
                await setfunc(False)
            else:
                await setfunc(True)
                pic_mode, txt_mode = on_pic, on_txt
                btn_mode = '‚úÖ'
                del_btn_mode = 'D…™s·¥Ä ô ü·¥á M·¥è·¥Ö·¥á ‚ùå'
                
            return pic_mode, txt_mode, (del_btn_mode if delfunc else btn_mode)
            
    except Exception as e:
        print(f"Error occured at [fileSettings(getfunc, setfunc=None, delfunc=False)] : {e}")

def buttonStatus(pc_data: str, hc_data: str, cb_data: str) -> list:
    button = [
        [
            InlineKeyboardButton(f'P Ä·¥è·¥õ·¥á·¥Ñ·¥õ C·¥è…¥·¥õ·¥á…¥·¥õ: {pc_data}', callback_data='pc'),
            InlineKeyboardButton(f'H…™·¥Ö·¥á C·¥Ä·¥ò·¥õ…™·¥è…¥: {hc_data}', callback_data='hc')
        ],
        [
            InlineKeyboardButton(f'C ú·¥Ä…¥…¥·¥á ü B·¥ú·¥õ·¥õ·¥è…¥: {cb_data}', callback_data='cb'), 
            InlineKeyboardButton(f'‚óà S·¥á·¥õ B·¥ú·¥õ·¥õ·¥è…¥ ‚û™', callback_data='setcb')
        ],
        [
            InlineKeyboardButton('üîÑ R·¥á“ì Ä·¥ás ú', callback_data='files_cmd'), 
            InlineKeyboardButton('C ü·¥ès·¥á ‚úñÔ∏è', callback_data='close')
        ],
    ]
    return button

#functin help to checking if a user is admin or owner before processing query....
async def authoUser(query, user_id, owner_only=False):
    if not owner_only:
        if not any([user_id == OWNER_ID, await admin_exist(user_id)]):
            await query.answer("‚ùå Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ A·¥Ö·¥ç…™…¥ !", show_alert=True)
            return False
    else:
        if user_id != OWNER_ID:
            await query.answer("‚ùå Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ O·¥°…¥·¥á Ä !", show_alert=True)
            return False
        
    await query.answer("‚ôªÔ∏è Q·¥ú·¥á Ä è P Ä·¥è·¥Ñ·¥áss…™…¥…¢....") 
    return True   

@Bot.on_callback_query()
async def cb_handler(client: Bot, query: CallbackQuery):
    data = query.data        
    if data == "close":
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass
            
    elif data == "about":
        user = await client.get_users(OWNER_ID)
        user_link = f"https://t.me/{user.username}" if user.username else f"tg://openmessage?user_id={OWNER_ID}" 
        ownername = f"<b><a href={user_link}>{user.first_name}</a></b>" if user.first_name else f"<a href={user_link}>no name !</a>"
        await query.edit_message_media(
            InputMediaPhoto("https://telegra.ph/file/ff8fbe7d67a3c7492c353.jpg", 
                            ABOUT_TXT.format(
                                botname = client.name,
                                ownername = ownername, 
                            )
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('‚¨ÖÔ∏è B·¥Ä·¥Ñ·¥ã', callback_data='start'), InlineKeyboardButton('C ü·¥ès·¥á ‚úñÔ∏è', callback_data='close')]
            ]),
        )
        
    elif data == "setting":
        await query.edit_message_media(InputMediaPhoto(random.choice(PICS), "<b>P ü·¥á·¥Äs·¥á w·¥Ä…™·¥õ !\n\n<i>üîÑ R·¥á·¥õ Ä…™·¥á·¥†…™…¥…¢ ·¥Ä ü ü S·¥á·¥õ·¥õ…™…¥…¢s...</i></b>"))
        try:
            total_fsub = len(await get_all_channels())
            total_admin = len(await get_all_admins())
            total_ban = len(await get_ban_users())
            autodel_mode = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_auto_delete() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            protect_content = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_protect_content() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            hide_caption = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_hide_caption() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            chnl_butn = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_channel_button() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            reqfsub = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_request_forcesub() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            free_mode = 'E…¥·¥Ä ô ü·¥á·¥Ö' if await get_free_mode() else 'D…™s·¥Ä ô ü·¥á·¥Ö'
            
            await query.edit_message_media(
                InputMediaPhoto(random.choice(PICS),
                                SETTING_TXT.format(
                                    total_fsub = total_fsub,
                                    total_admin = total_admin,
                                    total_ban = total_ban,
                                    autodel_mode = autodel_mode,
                                    protect_content = protect_content,
                                    hide_caption = hide_caption,
                                    chnl_butn = chnl_butn,
                                    reqfsub=reqfsub,
                                    free_mode=free_mode,
                                )
                ),
                reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('‚¨ÖÔ∏è B·¥Ä·¥Ñ·¥ã', callback_data='start'), InlineKeyboardButton('C ü·¥ès·¥á ‚úñÔ∏è', callback_data='close')]
                ]),
            )
        except Exception as e:
            print(f"! Error Occured on callback data = 'setting' : {e}")
        
    elif data == "start":
        await query.edit_message_media(
            InputMediaPhoto(random.choice(PICS), 
                            START_MSG.format(
                                first = query.from_user.first_name,
                                last = query.from_user.last_name,
                                username = None if not query.from_user.username else '@' + query.from_user.username,
                                mention = query.from_user.mention,
                                id = query.from_user.id
                            )
            ),
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton('ü§ñ A ô·¥è·¥ú·¥õ ·¥ç·¥á', callback_data='about'), InlineKeyboardButton('S·¥á·¥õ·¥õ…™…¥…¢s ‚öôÔ∏è', callback_data='setting')]
            ]),
        )
        
    elif data == "files_cmd":
        if await authoUser(query, query.from_user.id):   
            try:
                protect_content, pcd = await fileSettings(get_protect_content)
                hide_caption, hcd = await fileSettings(get_hide_caption)
                channel_button, cbd = await fileSettings(get_channel_button)
                name, link = await get_channel_button_link()
                
                await query.edit_message_media(
                    InputMediaPhoto(files_cmd_pic,
                                    FILES_CMD_TXT.format(
                                        protect_content = protect_content,
                                        hide_caption = hide_caption,
                                        channel_button = channel_button,
                                        name = name,
                                        link = link
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup(buttonStatus(pcd, hcd, cbd)),
                )                   
            except Exception as e:
                print(f"! Error Occured on callback data = 'files_cmd' : {e}")
            
    elif data == "pc":
        if await authoUser(query, query.from_user.id):   
            try:
                pic, protect_content, pcd = await fileSettings(get_protect_content, set_protect_content)
                hide_caption, hcd = await fileSettings(get_hide_caption)   
                channel_button, cbd = await fileSettings(get_channel_button) 
                name, link = await get_channel_button_link()
                
                await query.edit_message_media(
                    InputMediaPhoto(pic,
                                    FILES_CMD_TXT.format(
                                        protect_content = protect_content,
                                        hide_caption = hide_caption,
                                        channel_button = channel_button,
                                        name = name,
                                        link = link
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup(buttonStatus(pcd, hcd, cbd))
                )                   
            except Exception as e:
                print(f"! Error Occured on callback data = 'pc' : {e}")
            
    elif data == "hc":
        if await authoUser(query, query.from_user.id):     
            try:
                protect_content, pcd = await fileSettings(get_protect_content)
                pic, hide_caption, hcd = await fileSettings(get_hide_caption, set_hide_caption)   
                channel_button, cbd = await fileSettings(get_channel_button) 
                name, link = await get_channel_button_link()
                
                await query.edit_message_media(
                    InputMediaPhoto(pic,
                                    FILES_CMD_TXT.format(
                                        protect_content = protect_content,
                                        hide_caption = hide_caption,
                                        channel_button = channel_button,
                                        name = name,
                                        link = link
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup(buttonStatus(pcd, hcd, cbd))
                )                   
            except Exception as e:
                print(f"! Error Occured on callback data = 'hc' : {e}")
            
    elif data == "cb":
        if await authoUser(query, query.from_user.id):   
            try:
                protect_content, pcd = await fileSettings(get_protect_content)
                hide_caption, hcd = await fileSettings(get_hide_caption)   
                pic, channel_button, cbd = await fileSettings(get_channel_button, set_channel_button) 
                name, link = await get_channel_button_link()
                
                await query.edit_message_media(
                    InputMediaPhoto(pic,
                                    FILES_CMD_TXT.format(
                                        protect_content = protect_content,
                                        hide_caption = hide_caption,
                                        channel_button = channel_button,
                                        name = name,
                                        link = link
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup(buttonStatus(pcd, hcd, cbd))
                )                   
            except Exception as e:
                print(f"! Error Occured on callback data = 'cb' : {e}")
            
    elif data == "setcb":
        id = query.from_user.id
        if await authoUser(query, id):   
            try:
                button_name, button_link = await get_channel_button_link()
            
                button_preview = [[InlineKeyboardButton(text=button_name, url=button_link)]]  
                set_msg = await client.ask(chat_id = id, text=f'<b>T·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥, P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥†·¥Ä ü…™·¥Ö ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õs ·¥°…™·¥õ ú…™…¥ 1 ·¥ç…™…¥·¥ú·¥õ·¥á.\nF·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á:\n<blockquote><code>Join Channel - https://t.me/btth480p</code></blockquote>\n\n<i>B·¥á ü·¥è·¥° …™s  ô·¥ú·¥õ·¥õ·¥è…¥ P Ä·¥á·¥†…™·¥á·¥° ‚¨áÔ∏è</i></b>', timeout=60, reply_markup=InlineKeyboardMarkup(button_preview), disable_web_page_preview = True)
                button = set_msg.text.split(' - ')
                
                if len(button) != 2:
                    markup = [[InlineKeyboardButton(f'‚óà S·¥á·¥õ C ú·¥Ä…¥…¥·¥á ü B·¥ú·¥õ·¥õ·¥è…¥ ‚û™', callback_data='setcb')]]
                    return await set_msg.reply("<b>P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥†·¥Ä ü…™·¥Ö ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õs.\nF·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á:\n<blockquote><code>Join Channel - https://t.me/btth480p</code></blockquote>\n\n<i>T Ä è ·¥Ä…¢·¥Ä…™…¥  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥..</i></b>", reply_markup=InlineKeyboardMarkup(markup), disable_web_page_preview = True)
                
                button_name = button[0].strip(); button_link = button[1].strip()
                button_preview = [[InlineKeyboardButton(text=button_name, url=button_link)]]
                
                await set_msg.reply("<b><i>A·¥Ö·¥Ö·¥á·¥Ö S·¥ú·¥Ñc·¥áss“ì·¥ú ü ü è ‚úÖ</i>\n<blockquote>S·¥á·¥á  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Äs P Ä·¥á·¥†…™·¥á·¥° ‚¨áÔ∏è</blockquote></b>", reply_markup=InlineKeyboardMarkup(button_preview))
                await set_channel_button_link(button_name, button_link)
                return
            except Exception as e:
                try:
                    await set_msg.reply(f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö..\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>")
                    print(f"! Error Occured on callback data = 'setcb' : {e}")
                except:
                    await client.send_message(id, text=f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö..\n<blockquote><i>R·¥á·¥Äs·¥è…¥: 1 minute Time out ..</i></b></blockquote>", disable_notification=True)
                    print(f"! Error Occured on callback data = 'setcb' -> R·¥á·¥Äs·¥è…¥: 1 minute Time out ..")

    elif data == 'autodel_cmd':
        if await authoUser(query, query.from_user.id, owner_only=True):            
            try:
                timer = convert_time(await get_del_timer())
                autodel_mode, mode = await fileSettings(get_auto_delete, delfunc=True)
                
                await query.edit_message_media(
                    InputMediaPhoto(autodel_cmd_pic,
                                    AUTODEL_CMD_TXT.format(
                                        autodel_mode = autodel_mode,
                                        timer = timer
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(mode, callback_data='chng_autodel'), InlineKeyboardButton('‚óà S·¥á·¥õ T…™·¥ç·¥á Ä ‚è±', callback_data='set_timer')],
                        [InlineKeyboardButton('üîÑ R·¥á“ì Ä·¥ás ú', callback_data='autodel_cmd'), InlineKeyboardButton('C ü·¥ès·¥á ‚úñÔ∏è', callback_data='close')]
                    ])
                )
            except Exception as e:
                print(f"! Error Occured on callback data = 'autodel_cmd' : {e}")
            
    elif data == 'chng_autodel':
        if await authoUser(query, query.from_user.id, owner_only=True):              
            try:
                timer = convert_time(await get_del_timer())
                pic, autodel_mode, mode = await fileSettings(get_auto_delete, set_auto_delete, delfunc=True)
            
                await query.edit_message_media(
                    InputMediaPhoto(pic,
                                    AUTODEL_CMD_TXT.format(
                                        autodel_mode = autodel_mode,
                                        timer = timer
                                    )
                    ),
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton(mode, callback_data='chng_autodel'), InlineKeyboardButton('‚óà S·¥á·¥õ T…™·¥ç·¥á Ä ‚è±', callback_data='set_timer')],
                        [InlineKeyboardButton('üîÑ R·¥á“ì Ä·¥ás ú', callback_data='autodel_cmd'), InlineKeyboardButton('C ü·¥ès·¥á ‚úñÔ∏è', callback_data='close')]
                    ])
                )
            except Exception as e:
                print(f"! Error Occured on callback data = 'chng_autodel' : {e}")

    elif data == 'set_timer':
        id = query.from_user.id
        if await authoUser(query, id, owner_only=True):  
            try:
                timer = convert_time(await get_del_timer())
                set_msg = await client.ask(chat_id = id, text=f'<b><blockquote>‚è± C·¥ú Ä Ä·¥á…¥·¥õ T…™·¥ç·¥á Ä: {timer}</blockquote>\n\nT·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ…™·¥ç·¥á Ä, P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös ·¥°…™·¥õ ú…™…¥ 1 ·¥ç…™…¥·¥ú·¥õ·¥á.\n<blockquote>F·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á: <code>300</code>, <code>600</code>, <code>900</code></b></blockquote>', timeout=60)
                del_timer = set_msg.text.split()
                
                if len(del_timer) == 1 and del_timer[0].isdigit():
                    DEL_TIMER = int(del_timer[0])
                    await set_del_timer(DEL_TIMER)
                    timer = convert_time(DEL_TIMER)
                    await set_msg.reply(f"<b><i>A·¥Ö·¥Ö·¥á·¥Ö S·¥ú·¥Ñc·¥áss“ì·¥ú ü ü è ‚úÖ</i>\n<blockquote>‚è± C·¥ú Ä Ä·¥á…¥·¥õ T…™·¥ç·¥á Ä: {timer}</blockquote></b>")
                else:
                    markup = [[InlineKeyboardButton('‚óà S·¥á·¥õ D·¥á ü·¥á·¥õ·¥á T…™·¥ç·¥á Ä ‚è±', callback_data='set_timer')]]
                    return await set_msg.reply("<b>P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös.\n<blockquote>F·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á: <code>300</code>, <code>600</code>, <code>900</code></blockquote>\n\n<i>T Ä è ·¥Ä…¢·¥Ä…™…¥  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥..</i></b>", reply_markup=InlineKeyboardMarkup(markup))

            except Exception as e:
                try:
                    await set_msg.reply(f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö..\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>")
                    print(f"! Error Occured on callback data = 'set_timer' : {e}")
                except:
                    await client.send_message(id, text=f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö..\n<blockquote><i>R·¥á·¥Äs·¥è…¥: 1 minute Time out ..</i></b></blockquote>", disable_notification=True)
                    print(f"! Error Occured on callback data = 'set_timer' -> R·¥á·¥Äs·¥è…¥: 1 minute Time out ..")

    elif data == "more_settings":
        user_id = query.from_user.id
        if not await authoUser(query, user_id, owner_only=True):
            await query.answer("‚ùå You are not authorized to do this.", show_alert=True)
            return
        try:
            await query.message.edit_text(
                "<b>P ü·¥á·¥Äs·¥á w·¥Ä…™·¥õ !\n\n<i>üîÑ R·¥á·¥õ Ä…™·¥á·¥†…™…¥…¢ ·¥Ä ü ü S·¥á·¥õ·¥õ…™…¥…¢s...</i></b>"
            )
            REQFSUB_CHNLS = await db.get_reqChannel()
            if REQFSUB_CHNLS:
                LISTS = ""
                for CHNL in REQFSUB_CHNLS:
                    await query.message.reply_chat_action(ChatAction.TYPING)
                    try:
                        chat = await client.get_chat(CHNL)
                        channel_name = chat.title or "<i>U…¥·¥Ä ô ü·¥á L·¥è·¥Ä·¥Ö N·¥Ä·¥ç·¥á..</i>"
                    except Exception:
                        channel_name = "<i>U…¥·¥Ä ô ü·¥á L·¥è·¥Ä·¥Ö N·¥Ä·¥ç·¥á..</i>"
                    user = await db.get_reqSent_user(CHNL)
                    channel_users = len(user) if user else 0
                    link = await db.get_stored_reqLink(CHNL)
                    if link:
                        channel_name = f'<a href="{link}">{channel_name}</a>'
                    LISTS += f"NAME: {channel_name}\n(ID: <code>{CHNL}</code>)\nUSERS: {channel_users}\n\n"
            else:
                LISTS = "E·¥ç·¥ò·¥õ è R·¥á«´·¥ú·¥ás·¥õ F·¥è Ä·¥Ñ·¥áS·¥ú ô C ú·¥Ä…¥…¥·¥á ü L…™s·¥õ !?"
            
            buttons = [
                [InlineKeyboardButton("·¥Ñ ü·¥á·¥Ä Ä ·¥ús·¥á Äs", callback_data="clear_users"),
                 InlineKeyboardButton("c ü·¥á·¥Ä Ä c ú·¥Ä…¥…¥·¥á üs", callback_data="clear_chnls")],
                [InlineKeyboardButton("c ü·¥á·¥Ä Ä  ü…™…¥·¥ãs", callback_data="clear_links")],
                [InlineKeyboardButton("‚ôªÔ∏è  R·¥á“ì Ä·¥ás ú S·¥õ·¥Ä·¥õ·¥ús  ‚ôªÔ∏è", callback_data="more_settings")],
                [InlineKeyboardButton("‚¨ÖÔ∏è B·¥Ä·¥Ñ·¥ã", callback_data="req_fsub"),
                 InlineKeyboardButton("C ü·¥ès·¥á ‚úñÔ∏è", callback_data="close")]
            ]
            await query.message.reply_chat_action(ChatAction.CANCEL)
            await query.message.edit_text(
                text=RFSUB_MS_TXT.format(reqfsub_list=LISTS.strip()),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            print(f"! Error in more_settings_handler: {e}")

    elif data == "clear_users":
        user_id = query.from_user.id
        if not await authoUser(query, user_id, owner_only=True):
            await query.answer("‚ùå Unauthorized", show_alert=True)
            return
        try:
            REQFSUB_CHNLS = await db.get_reqChannel()
            if not REQFSUB_CHNLS:
                return await query.answer("E·¥ç·¥ò·¥õ è R·¥á«´·¥ú·¥ás·¥õ F·¥è Ä·¥Ñ·¥áS·¥ú ô C ú·¥Ä…¥…¥·¥á ü !?", show_alert=True)
            
            await query.answer("‚ôªÔ∏è Q·¥ú·¥á Ä è P Ä·¥è·¥Ñ·¥áss…™…¥…¢....")
            REQFSUB_CHNLS = list(map(str, REQFSUB_CHNLS))
            buttons = [REQFSUB_CHNLS[i:i + 2] for i in range(0, len(REQFSUB_CHNLS), 2)]
            buttons.insert(0, ['CANCEL'])
            buttons.append(['DELETE ALL CHANNELS USER'])
            
            user_reply = await client.ask(
                user_id,
                text=CLEAR_USERS_TXT,
                reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
            )
            
            if user_reply.text == 'CANCEL':
                return await user_reply.reply("<b><i>üÜë C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö...</i></b>", reply_markup=ReplyKeyboardRemove())
            elif user_reply.text in REQFSUB_CHNLS:
                try:
                    await db.clear_reqSent_user(int(user_reply.text))
                    return await user_reply.reply(
                        f"<b><blockquote>‚úÖ Us·¥á Ä D·¥Ä·¥õ·¥Ä S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è C ü·¥á·¥Ä Ä·¥á·¥Ö “ì Ä·¥è·¥ç C ú·¥Ä…¥…¥·¥á ü …™·¥Ö: <code>{user_reply.text}</code></blockquote></b>",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            elif user_reply.text == 'DELETE ALL CHANNELS USER':
                try:
                    for CHNL in REQFSUB_CHNLS:
                        await db.clear_reqSent_user(int(CHNL))
                    return await user_reply.reply(
                        "<b><blockquote>‚úÖ Us·¥á Ä D·¥Ä·¥õ·¥Ä S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è C ü·¥á·¥Ä Ä·¥á·¥Ö “ì Ä·¥è·¥ç A ü ü C ú·¥Ä…¥…¥·¥á ü …™·¥Ös</blockquote></b>",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            else:
                return await user_reply.reply(
                    "<b><blockquote>INVALID SELECTIONS</blockquote></b>",
                    reply_markup=ReplyKeyboardRemove()
                )
        except Exception as e:
            print(f"! Error Occurred on callback data = 'clear_users' : {e}")

    elif data == "clear_chnls":
        user_id = query.from_user.id
        if not await authoUser(query, user_id, owner_only=True):
            await query.answer("‚ùå Unauthorized", show_alert=True)
            return
        try:
            REQFSUB_CHNLS = await db.get_reqChannel()
            if not REQFSUB_CHNLS:
                return await query.answer("E·¥ç·¥ò·¥õ è R·¥á«´·¥ú·¥ás·¥õ F·¥è Ä·¥Ñ·¥áS·¥ú ô C ú·¥Ä…¥…¥·¥á ü !?", show_alert=True)
            
            await query.answer("‚ôªÔ∏è Q·¥ú·¥á Ä è P Ä·¥è·¥Ñ·¥áss…™…¥…¢....")
            REQFSUB_CHNLS = list(map(str, REQFSUB_CHNLS))
            buttons = [REQFSUB_CHNLS[i:i + 2] for i in range(0, len(REQFSUB_CHNLS), 2)]
            buttons.insert(0, ['CANCEL'])
            buttons.append(['DELETE ALL CHANNEL IDS'])
            
            user_reply = await client.ask(
                user_id,
                text=CLEAR_CHNLS_TXT,
                reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
            )
            
            if user_reply.text == 'CANCEL':
                return await user_reply.reply("<b><i>üÜë C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö...</i></b>", reply_markup=ReplyKeyboardRemove())
            elif user_reply.text in REQFSUB_CHNLS:
                try:
                    chnl_id = int(user_reply.text)
                    await db.del_reqChannel(chnl_id)
                    try:
                        await client.revoke_chat_invite_link(chnl_id, await db.get_stored_reqLink(chnl_id))
                    except Exception:
                        pass
                    await db.del_stored_reqLink(chnl_id)
                    return await user_reply.reply(
                        f"<b><blockquote><code>{user_reply.text}</code> C ú·¥Ä…¥…¥·¥á ü …™·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú …™·¥õs ·¥Ö·¥Ä·¥õ·¥Ä s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ</blockquote></b>",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            elif user_reply.text == 'DELETE ALL CHANNEL IDS':
                try:
                    for CHNL in REQFSUB_CHNLS:
                        chnl = int(CHNL)
                        await db.del_reqChannel(chnl)
                        try:
                            await client.revoke_chat_invite_link(chnl, await db.get_stored_reqLink(chnl))
                        except Exception:
                            pass
                        await db.del_stored_reqLink(chnl)
                    return await user_reply.reply(
                        "<b><blockquote>A ü ü C ú·¥Ä…¥…¥·¥á ü …™·¥Ös ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú …™·¥õs ·¥Ö·¥Ä·¥õ·¥Ä s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ</blockquote></b>",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            else:
                return await user_reply.reply(
                    "<b><blockquote>INVALID SELECTIONS</blockquote></b>",
                    reply_markup=ReplyKeyboardRemove()
                )
        except Exception as e:
            print(f"! Error Occurred on callback data = 'clear_chnls' : {e}")

    elif data == "clear_links":
        user_id = query.from_user.id
        if not await authoUser(query, user_id, owner_only=True):
            await query.answer("‚ùå Unauthorized", show_alert=True)
            return
        try:
            REQFSUB_CHNLS = await db.get_reqLink_channels()
            if not REQFSUB_CHNLS:
                return await query.answer("N·¥è S·¥õ·¥è Ä·¥á·¥Ö R·¥á«´·¥ú·¥ás·¥õ L…™…¥·¥ã A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á !?", show_alert=True)
            
            await query.answer("‚ôªÔ∏è Q·¥ú·¥á Ä è P Ä·¥è·¥Ñ·¥áss…™…¥…¢....")
            REQFSUB_CHNLS = list(map(str, REQFSUB_CHNLS))
            buttons = [REQFSUB_CHNLS[i:i + 2] for i in range(0, len(REQFSUB_CHNLS), 2)]
            buttons.insert(0, ['CANCEL'])
            buttons.append(['DELETE ALL REQUEST LINKS'])
            
            user_reply = await client.ask(
                user_id,
                text=CLEAR_LINKS_TXT,
                reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
            )
            
            if user_reply.text == 'CANCEL':
                return await user_reply.reply("<b><i>üÜë C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö...</i></b>", reply_markup=ReplyKeyboardRemove())
            elif user_reply.text in REQFSUB_CHNLS:
                channel_id = int(user_reply.text)
                try:
                    try:
                        await client.revoke_chat_invite_link(channel_id, await db.get_stored_reqLink(channel_id))
                    except Exception:
                        text = (
                            "<b>‚ùå U…¥·¥Ä ô ü·¥á ·¥õ·¥è R·¥á·¥†·¥è·¥ã·¥á  ü…™…¥·¥ã !"
                            "<blockquote expandable>…™·¥Ö: <code>{}</code></b>"
                            "<i>E…™·¥õ ú·¥á Ä ·¥õ ú·¥á  ô·¥è·¥õ …™s …¥·¥è·¥õ …™…¥ ·¥Ä ô·¥è·¥†·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü O Ä ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò Ä·¥è·¥ò·¥á Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s</i></blockquote>"
                        )
                        return await user_reply.reply(text=text.format(channel_id), reply_markup=ReplyKeyboardRemove())
                    await db.del_stored_reqLink(channel_id)
                    return await user_reply.reply(
                        f"<b><blockquote><code>{channel_id}</code> C ú·¥Ä…¥…¥·¥á üs L…™…¥·¥ã S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ</blockquote></b>",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            elif user_reply.text == 'DELETE ALL REQUEST LINKS':
                try:
                    result = ""
                    for CHNL in REQFSUB_CHNLS:
                        channel_id = int(CHNL)
                        try:
                            await client.revoke_chat_invite_link(channel_id, await db.get_stored_reqLink(channel_id))
                        except Exception:
                            result += (
                                f"<blockquote expandable><b><code>{channel_id}</code> U…¥·¥Ä ô ü·¥á ·¥õ·¥è R·¥á·¥†·¥è·¥ã·¥á ‚ùå</b>\n"
                                "<i>E…™·¥õ ú·¥á Ä ·¥õ ú·¥á  ô·¥è·¥õ …™s …¥·¥è·¥õ …™…¥ ·¥Ä ô·¥è·¥†·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü O Ä ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò Ä·¥è·¥ò·¥á Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s.</i></blockquote>\n"
                            )
                            continue
                        await db.del_stored_reqLink(channel_id)
                        result += f"<blockquote><b><code>{channel_id}</code> IDs L…™…¥·¥ã D·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ</b></blockquote>\n"
                    return await user_reply.reply(
                        f"<b>‚ÅâÔ∏è O·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ R·¥ás·¥ú ü·¥õ:</b>\n{result.strip()}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                except Exception as e:
                    return await user_reply.reply(
                        f"<b>! E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö...\n<blockquote>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>",
                        reply_markup=ReplyKeyboardRemove()
                    )
            else:
                return await user_reply.reply(
                    f"<b><blockquote>INVALID SELECTIONS</blockquote></b>",
                    reply_markup=ReplyKeyboardRemove()
                )
        except Exception as e:
            print(f"! Error Occurred on callback 'clear_links': {e}")


    elif data == "chng_req":
        await query.answer("‚ôªÔ∏è C ú·¥Ä…¥…¢…™…¥…¢ S·¥á·¥õ·¥õ…™…¥…¢....")
        try:
            current_setting = await db.get_request_forcesub()
            new_setting = not current_setting
            await db.set_request_forcesub(new_setting)
            
            on = off = ""
            if new_setting:
                on = "üü¢"
                texting = on_txt
            else:
                off = "üî¥"
                texting = off_txt
            
            buttons = [
                [InlineKeyboardButton(f"{on} ON", callback_data="chng_req"),
                 InlineKeyboardButton(f"{off} OFF", callback_data="chng_req")],
                [InlineKeyboardButton("‚öôÔ∏è M·¥è Ä·¥á S·¥á·¥õ·¥õ…™…¥…¢s ‚öôÔ∏è", callback_data="more_settings")]
            ]
            
            await query.message.edit_text(
                text=RFSUB_CMD_TXT.format(req_mode=texting),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            print(f"! Error Occurred on callback data = 'chng_req' : {e}")

    elif data == "req_fsub":
        await query.answer("‚ôªÔ∏è Q·¥ú·¥á Ä è P Ä·¥è·¥Ñ·¥áss…™…¥…¢....")
        try:
            on = off = ""
            if await db.get_request_forcesub():
                on = "üü¢"
                texting = on_txt
            else:
                off = "üî¥"
                texting = off_txt
            
            buttons = [
                [InlineKeyboardButton(f"{on} ON", callback_data="chng_req"),
                 InlineKeyboardButton(f"{off} OFF", callback_data="chng_req")],
                [InlineKeyboardButton("‚öôÔ∏è M·¥è Ä·¥á S·¥á·¥õ·¥õ…™…¥…¢s ‚öôÔ∏è", callback_data="more_settings")]
            ]
            
            await query.message.edit_text(
                text=RFSUB_CMD_TXT.format(req_mode=texting),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            print(f"! Error Occurred on callback data = 'req_fsub' : {e}")

    elif data == "buy_prem":
        """Dynamic premium purchase handler"""
        user_id = query.from_user.id
        first_name = query.from_user.first_name or "User"
        username = f"@{query.from_user.username}" if query.from_user.username else first_name
        user_mention = f"<a href='tg://user?id={user_id}'>{first_name}</a>"
        
        await query.answer("‚ôªÔ∏è L·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥s....")
        
        try:
            is_premium = await db.is_premium_user(user_id)
            
            if is_premium:
                premium_users = await db.get_premium_users()
                user_premium_data = next((user for user in premium_users if user['_id'] == user_id), None)
                
                if user_premium_data and user_premium_data.get("expiry_time"):
                    import time
                    from datetime import datetime, timezone
                    
                    current_time = time.time()
                    expiry_time = user_premium_data["expiry_time"]
                    remaining_seconds = expiry_time - current_time
                    
                    if remaining_seconds > 0:
                        days = int(remaining_seconds // 86400)
                        hours = int((remaining_seconds % 86400) // 3600)
                        time_left = f"{days}·¥Ö {hours} ú" if days > 0 else f"{hours} ú"
                        
                        extend_caption = (
                            f"üíé <b> ú·¥á è {user_mention}..!</b>\n\n"
                            f"‚úÖ  è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç!\n"
                            f"‚è∞ ·¥áx·¥ò…™ Ä·¥ás …™…¥: {time_left}\n\n"
                            f"üîÑ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥áx·¥õ·¥á…¥·¥Ö? ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥"
                        )
                        
                        extend_buttons = [
                            [InlineKeyboardButton("üë§ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥", url=f"tg://user?id={OWNER_ID}")],
                            [InlineKeyboardButton("üìä ·¥ç è ·¥ò ü·¥Ä…¥", callback_data="my_plan"),
                             InlineKeyboardButton("üîí ·¥Ñ ü·¥ès·¥á", callback_data="close")]
                        ]
                        
                        try:
                            await query.message.edit_text(
                                text=extend_caption,
                                reply_markup=InlineKeyboardMarkup(extend_buttons)
                            )
                        except Exception:
                            await client.send_message(
                                chat_id=query.message.chat.id,
                                text=extend_caption,
                                reply_markup=InlineKeyboardMarkup(extend_buttons)
                            )
                        return
        except Exception as e:
            print(f"Error checking premium status: {e}")
        
        # Dynamic plan buttons (you'll need to define these prices in your config)
        try:
            # Import prices from config if available, otherwise use defaults
            from config import PRICE1, PRICE2, PRICE3, PRICE4, PRICE5, UPI_ID, QR_PIC
        except ImportError:
            # Default prices if not in config
            PRICE1, PRICE2, PRICE3, PRICE4, PRICE5 = "‚Çπ10", "‚Çπ25", "‚Çπ50", "‚Çπ90", "‚Çπ150"
            UPI_ID = "nyxking@ybl"
            QR_PIC = "https://ibb.co/mVDMPLwW"
        
        plans = [
            {"id": "plan_1", "price": PRICE1, "duration": "7 ·¥Ö·¥Ä ès", "emoji": "‚ö°"},
            {"id": "plan_2", "price": PRICE2, "duration": "1 ·¥ç·¥è…¥·¥õ ú", "emoji": "üî•"},
            {"id": "plan_3", "price": PRICE3, "duration": "3 ·¥ç·¥è…¥·¥õ ús", "emoji": "üíé"},
            {"id": "plan_4", "price": PRICE4, "duration": "6 ·¥ç·¥è…¥·¥õ ús", "emoji": "üëë"},
            {"id": "plan_5", "price": PRICE5, "duration": "1  è·¥á·¥Ä Ä", "emoji": "üåü"}
        ]
        
        # Create dynamic plan buttons
        plan_buttons = []
        for i in range(0, len(plans), 2):
            row = []
            for j in range(2):
                if i + j < len(plans):
                    plan = plans[i + j]
                    row.append(InlineKeyboardButton(
                        f"‚Ä¢ {plan['duration']} ‚Ä¢",
                        callback_data=plan['id']
                    ))
            plan_buttons.append(row)
        
        # Add action buttons
        plan_buttons.extend([
            [InlineKeyboardButton("üìä ·¥ç è ·¥ò ü·¥Ä…¥", callback_data="my_plan"),
             InlineKeyboardButton("üîí ·¥Ñ ü·¥ès·¥á", callback_data="close")]
        ])
        
        caption = (
            f"üëã <b>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á {user_mention}..!</b>\n\n"
            f"üíé <b>·¥Ñ ú·¥è·¥ès·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥:</b>\n\n"
            f"üéØ <b>·¥Ä ü ü ·¥ò ü·¥Ä…¥s …™…¥·¥Ñ ü·¥ú·¥Ö·¥á:</b>\n"
            f"‚îú ‚ö° ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös\n"
            f"‚îú üö´ …¥·¥è ·¥Ä·¥Ös ·¥è Ä ·¥°·¥Ä…™·¥õ…™…¥…¢\n"
            f"‚îú ‚ö° “ì·¥Äs·¥õ·¥á Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢\n\n"
            f"üí≥ <b>·¥ú·¥ò…™:</b> <code>{UPI_ID}</code>\n"
            f"üì∑ <b>Q Ä C·¥è·¥Ö·¥á:</b> <a href='{QR_PIC}'>C ü…™·¥Ñ·¥ã ·¥õ·¥è V…™·¥á·¥°</a>\n\n"
            f"üì± s·¥Ñ·¥Ä…¥ «´ Ä ·¥Ñ·¥è·¥Ö·¥á ·¥Ä ô·¥è·¥†·¥á ·¥è Ä ·¥Ñ ú·¥è·¥ès·¥á ·¥ò ü·¥Ä…¥  ô·¥á ü·¥è·¥°"
        )
        
        try:
            # Check if QR_PIC exists and is valid
            if QR_PIC and QR_PIC.strip():
                try:
                    # Try to edit with photo if QR code exists
                    await query.message.edit_media(
                        media=InputMediaPhoto(
                            media=QR_PIC,
                            caption=caption
                        ),
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
                except Exception as edit_error:
                    print(f"Failed to edit message with QR photo: {edit_error}")
                    # Fallback: send new photo message
                    await client.send_photo(
                        chat_id=query.message.chat.id,
                        photo=QR_PIC,
                        caption=caption,
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
            else:
                # No QR code pic available, send/edit as text message
                try:
                    await query.message.edit_text(
                        text=caption,
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
                except Exception as edit_error:
                    print(f"Failed to edit message as text: {edit_error}")
                    # Fallback: send new text message
                    await client.send_message(
                        chat_id=query.message.chat.id,
                        text=caption,
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
            
            # Log the premium inquiry for analytics
            print(f"Premium inquiry from user {user_id} ({username})")
            
        except Exception as e:
            print(f"Error sending premium purchase message: {e}")
            
            # Final fallback: send simple text message
            try:
                await client.send_message(
                    chat_id=query.message.chat.id,
                    text=caption,
                    reply_markup=InlineKeyboardMarkup(plan_buttons)
                )
            except Exception as e2:
                print(f"All fallback methods failed: {e2}")
                await query.answer("‚ùå E Ä Ä·¥è Ä  ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥s. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥!", show_alert=True)

    elif data.startswith("plan_"):
        """Handle individual plan details"""
        plan_id = query.data
        user_id = query.from_user.id
        username = f"@{query.from_user.username}" if query.from_user.username else query.from_user.first_name or "·¥ús·¥á Ä"
        
        await query.answer("‚ôªÔ∏è L·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ò ü·¥Ä…¥ ·¥Ö·¥á·¥õ·¥Ä…™ üs....")
        
        try:
            # Import prices from config
            from config import PRICE1, PRICE2, PRICE3, PRICE4, PRICE5, UPI_ID
        except ImportError:
            # Default prices if not in config
            PRICE1, PRICE2, PRICE3, PRICE4, PRICE5 = "‚Çπ10", "‚Çπ25", "‚Çπ50", "‚Çπ90", "‚Çπ150"
            UPI_ID = "nyxking@ybl"
        
        # Plan details mapping
        plan_details = {
            "plan_1": {
                "price": PRICE1, "duration": "7 ·¥Ö·¥Ä ès", "emoji": "‚ö°",
                "benefits": ["·¥ò·¥á Ä“ì·¥á·¥Ñ·¥õ “ì·¥è Ä ·¥õ Ä…™·¥Ä ü", "·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ös", "…¥·¥è ·¥Ä·¥Ös"]
            },
            "plan_2": {
                "price": PRICE2, "duration": "1 ·¥ç·¥è…¥·¥õ ú", "emoji": "üî•",
                "benefits": ["·¥ç·¥ès·¥õ ·¥ò·¥è·¥ò·¥ú ü·¥Ä Ä", " ô·¥ás·¥õ ·¥†·¥Ä ü·¥ú·¥á", "“ì·¥ú ü ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás", "·¥ò Ä…™·¥è Ä…™·¥õ è s·¥ú·¥ò·¥ò·¥è Ä·¥õ"]
            },
            "plan_3": {
                "price": PRICE3, "duration": "3 ·¥ç·¥è…¥·¥õ ús", "emoji": "üíé",
                "benefits": ["25% s·¥Ä·¥†…™…¥…¢s", "·¥áx·¥õ·¥á…¥·¥Ö·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss", "·¥Ä ü ü ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás"]
            },
            "plan_4": {
                "price": PRICE4, "duration": "6 ·¥ç·¥è…¥·¥õ ús", "emoji": "üëë",
                "benefits": ["40% s·¥Ä·¥†…™…¥…¢s", " ü·¥è…¥…¢ ·¥õ·¥á Ä·¥ç ·¥†·¥Ä ü·¥ú·¥á", "·¥ò Ä…™·¥è Ä…™·¥õ è s·¥ú·¥ò·¥ò·¥è Ä·¥õ"]
            },
            "plan_5": {
                "price": PRICE5, "duration": "1  è·¥á·¥Ä Ä", "emoji": "üåü",
                "benefits": ["·¥ç·¥Äx…™·¥ç·¥ú·¥ç s·¥Ä·¥†…™…¥…¢s", " ô·¥ás·¥õ ·¥Ö·¥á·¥Ä ü", "·¥†…™·¥ò s·¥ú·¥ò·¥ò·¥è Ä·¥õ", "·¥Ä ü ü “ì·¥ú·¥õ·¥ú Ä·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás"]
            }
        }
        
        if plan_id not in plan_details:
            await query.answer("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ò ü·¥Ä…¥", show_alert=True)
            return
        
        plan = plan_details[plan_id]
        benefits_text = "\n".join([f"‚îú ‚úÖ {benefit}" for benefit in plan["benefits"]])
        
        plan_text = (
            f"{plan['emoji']} <b>{plan['price']} - {plan['duration']}</b>\n\n"
            f"üéØ <b>·¥õ ú…™s ·¥ò ü·¥Ä…¥ …™…¥·¥Ñ ü·¥ú·¥Ö·¥ás:</b>\n"
            f"{benefits_text}\n"
            f"‚îî ‚ö° “ì·¥Äs·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ…™·¥è…¥\n\n"
            f"üí≥ <b>·¥ò·¥Ä è·¥ç·¥á…¥·¥õ s·¥õ·¥á·¥òs:</b>\n"
            f"1Ô∏è‚É£ ·¥ò·¥Ä è <b>{plan['price']}</b> ·¥õ·¥è ·¥ú·¥ò…™: <code>{UPI_ID}</code>\n"
            f"2Ô∏è‚É£ s·¥á…¥·¥Ö s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥\n"
            f"3Ô∏è‚É£ …¢·¥á·¥õ …™…¥s·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ…™·¥è…¥! ‚ö°"
        )
        
        plan_buttons = [
            [InlineKeyboardButton("‚úÖ ·¥†·¥á Ä…™“ì è ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ", callback_data=f"verify_payment_{plan_id}")],
            [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ò ü·¥Ä…¥s", callback_data="buy_prem"),
             InlineKeyboardButton("üîí ·¥Ñ ü·¥ès·¥á", callback_data="close")]
        ]
        
        try:
            # Try to edit as caption first (if it's a photo message)
            try:
                await query.message.edit_caption(
                    caption=plan_text,
                    reply_markup=InlineKeyboardMarkup(plan_buttons)
                )
            except Exception:
                # If caption edit fails, try text edit
                try:
                    await query.message.edit_text(
                        text=plan_text,
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
                except Exception:
                    # If both fail, send new message
                    await client.send_message(
                        chat_id=query.message.chat.id,
                        text=plan_text,
                        reply_markup=InlineKeyboardMarkup(plan_buttons)
                    )
            
            print(f"Plan {plan_id} viewed by user {user_id}")
            
        except Exception as e:
            print(f"Error showing plan details: {e}")
            await query.answer("‚ùå ·¥á Ä Ä·¥è Ä  ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ò ü·¥Ä…¥ ·¥Ö·¥á·¥õ·¥Ä…™ üs", show_alert=True)

    elif data.startswith("verify_payment_"):
        """Show payment verification error with admin contact"""
        user_id = query.from_user.id
        plan_id = query.data.replace("verify_payment_", "")
        
        await query.answer("‚ùå Server error payment failed to verify contact admin", show_alert=True)
        
        # Show error message with admin contact button
        error_text = (
            f"‚ùå <b>Server Error</b>\n\n"
            f"Payment verification failed due to server error.\n\n"
            f"Please contact admin for manual verification."
        )
        
        error_buttons = [
            [InlineKeyboardButton("üë§ Contact Admin", url=f"tg://user?id={OWNER_ID}")],
            [InlineKeyboardButton("üîô Back to Plan", callback_data=plan_id),
             InlineKeyboardButton("üîí Close", callback_data="close")]
        ]
        
        try:
            await query.message.edit_caption(
                caption=error_text,
                reply_markup=InlineKeyboardMarkup(error_buttons)
            )
        except Exception:
            await query.message.edit_text(
                text=error_text,
                reply_markup=InlineKeyboardMarkup(error_buttons)
            )

    elif data == "my_plan":
        """Show user's current premium plan status"""
        user_id = query.from_user.id
        await query.answer("üìä  ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä ·¥ò ü·¥Ä…¥...", show_alert=False)
        
        try:
            # Check if user has premium
            premium_info = await get_premium_user_info(user_id)
            
            if premium_info:
                from datetime import datetime
                import pytz
                
                ist = pytz.timezone("Asia/Kolkata")
                
                # Calculate expiry date
                expiry_time = datetime.fromtimestamp(premium_info["expiry_time"], ist)
                expiry_date = expiry_time.strftime('%d %b %Y, %I:%M %p')
                
                # Calculate days remaining
                current_time = time.time()
                days_remaining = max(0, int((premium_info["expiry_time"] - current_time) / (24 * 60 * 60)))
                
                # Calculate added date
                if premium_info.get("added_time"):
                    added_time = datetime.fromtimestamp(premium_info["added_time"], ist)
                    added_date = added_time.strftime('%d %b %Y, %I:%M %p')
                else:
                    added_date = "·¥ú…¥·¥ã…¥·¥è·¥°…¥"
                
                plan_text = (
                    f"üíé <b> è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥</b>\n\n"
                    f"‚úÖ <b>s·¥õ·¥Ä·¥õ·¥ús:</b> ·¥Ä·¥Ñ·¥õ…™·¥†·¥á\n"
                    f"üìÖ <b>·¥áx·¥ò…™ Ä·¥ás ·¥è…¥:</b> {expiry_date}\n"
                    f"‚è∞ <b>·¥Ö·¥Ä ès  ü·¥á“ì·¥õ:</b> {days_remaining} ·¥Ö·¥Ä ès\n"
                    f"üóì <b>·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥è…¥:</b> {added_date}\n\n"
                    f"üöÄ <b>·¥ò Ä·¥á·¥ç…™·¥ú·¥ç  ô·¥á…¥·¥á“ì…™·¥õs:</b>\n"
                    f"‚îú ‚ö° “ì·¥Äs·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥ò·¥á·¥á·¥Ö\n"
                    f"‚îú üö´ …¥·¥è ·¥Ä·¥Ös\n"
                    f"‚îú üîì ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss\n"
                    f"‚îî üéØ ·¥ò Ä…™·¥è Ä…™·¥õ è s·¥ú·¥ò·¥ò·¥è Ä·¥õ\n\n"
                    f"üíñ <i>·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ús!</i>"
                )
                
                plan_buttons = [
                    [InlineKeyboardButton("üîÑ ·¥áx·¥õ·¥á…¥·¥Ö ·¥ò ü·¥Ä…¥", callback_data="buy_prem")],
                    [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="start"),
                     InlineKeyboardButton("üîí ·¥Ñ ü·¥ès·¥á", callback_data="close")]
                ]
                
            else:
                plan_text = (
                    f"‚ùå <b>…¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥</b>\n\n"
                    f"üîí <b>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús:</b> “ì Ä·¥á·¥á ·¥ús·¥á Ä\n\n"
                    f"üí° <b>·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥è Ä:</b>\n"
                    f"‚îú ‚ö° “ì·¥Äs·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥ò·¥á·¥á·¥Ö\n"
                    f"‚îú üö´ …¥·¥è ·¥Ä·¥Ös\n"
                    f"‚îú üîì ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss\n"
                    f"‚îî üéØ ·¥ò Ä…™·¥è Ä…™·¥õ è s·¥ú·¥ò·¥ò·¥è Ä·¥õ\n\n"
                    f"üéØ <i>…¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç …¥·¥è·¥° ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è “ì·¥ú ü ü s·¥ò·¥á·¥á·¥Ö!</i>"
                )
                
                plan_buttons = [
                    [InlineKeyboardButton("üíé …¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="buy_prem")],
                    [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="start"),
                     InlineKeyboardButton("üîí ·¥Ñ ü·¥ès·¥á", callback_data="close")]
                ]
            
            try:
                await query.message.edit_caption(
                    caption=plan_text,
                    reply_markup=InlineKeyboardMarkup(plan_buttons)
                )
            except Exception:
                await query.message.edit_text(
                    text=plan_text,
                    reply_markup=InlineKeyboardMarkup(plan_buttons)
                )
                
        except Exception as e:
            print(f"Error in my_plan handler: {e}")
            await query.answer("‚ùå ·¥á Ä Ä·¥è Ä  ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ò ü·¥Ä…¥ …™…¥“ì·¥è", show_alert=True)

    elif data == "refresh_token_settings":
        """Refresh token settings display"""
        if await authoUser(query, query.from_user.id, owner_only=True):
            try:
                await query.message.edit_text("üîÑ <b> Ä·¥á·¥õ Ä…™·¥á·¥†…™…¥…¢ s·¥á·¥õ·¥õ…™…¥…¢s...</b>\n\n<i>·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</i>")
                
                # Small delay for better UX
                import asyncio
                await asyncio.sleep(1)
                
                # Get current settings
                from database.database import get_token_settings
                from helper_func import get_exp_time
                
                settings = await get_token_settings()
                
                # Format settings display
                shortlink_url = settings.get('shortlink_url', '') or "…¥·¥è·¥õ s·¥á·¥õ"
                shortlink_key = settings.get('shortlink_key', '') or "…¥·¥è·¥õ s·¥á·¥õ"
                verify_expire = settings.get('verify_expire', 86400)
                updated_time = settings.get('updated_time', 0)
                
                # Mask API key for security
                if shortlink_key != "…¥·¥è·¥õ s·¥á·¥õ" and len(shortlink_key) > 8:
                    masked_key = shortlink_key[:4] + "*" * (len(shortlink_key) - 8) + shortlink_key[-4:]
                else:
                    masked_key = shortlink_key
                
                # Format expiry time
                expire_time = get_exp_time(verify_expire)
                
                # Format last updated
                if updated_time > 0:
                    from datetime import datetime
                    import pytz
                    ist = pytz.timezone("Asia/Kolkata")
                    last_updated = datetime.fromtimestamp(updated_time, ist).strftime('%d %b %Y, %I:%M %p')
                else:
                    last_updated = "…¥·¥á·¥†·¥á Ä"
                
                token_text = (
                    f"üîß <b>·¥õ·¥è·¥ã·¥á…¥ s·¥á·¥õ·¥õ…™…¥…¢s</b>\n"
                    f"üîó <b>s ú·¥è Ä·¥õ ·¥ú Ä ü:</b> <code>{shortlink_url}</code>\n"
                    f"üîë <b>·¥Ä·¥ò…™ ·¥ã·¥á è:</b> <code>{masked_key}</code>\n"
                    f"‚è∞ <b>·¥áx·¥ò…™ Ä·¥ás …™…¥:</b> {expire_time}\n"
                    f"üïê <b>·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö:</b> {last_updated}\n\n"
                    f"üí° <i>·¥ç·¥Ä…¥·¥Ä…¢·¥á  ô·¥á ü·¥è·¥° ‚Üì</i>"
                )
                
                token_buttons = [
                    [InlineKeyboardButton("‚Ä¢ s·¥á·¥õ ·¥ú Ä ü ‚Ä¢", callback_data="set_token_url"),
                     InlineKeyboardButton("‚Ä¢ s·¥á·¥õ ·¥ã·¥á è ‚Ä¢", callback_data="set_token_key")],
                    [InlineKeyboardButton("‚Ä¢ s·¥á·¥õ ·¥áx·¥ò…™ Ä·¥á ‚Ä¢", callback_data="set_token_expire")],
                    [InlineKeyboardButton("‚Ä¢  Ä·¥á“ì Ä·¥ás ú ‚Ä¢", callback_data="refresh_token_settings")],
                    [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close")]
                ]
                
                await query.message.edit_text(
                    text=token_text,
                    reply_markup=InlineKeyboardMarkup(token_buttons),
                    parse_mode=ParseMode.HTML
                )
                
            except Exception as e:
                print(f"Error refreshing token settings: {e}")
                await query.answer("‚ùå ·¥á Ä Ä·¥è Ä  Ä·¥á“ì Ä·¥ás ú…™…¥…¢ s·¥á·¥õ·¥õ…™…¥…¢s", show_alert=True)

    elif data == "set_token_url":
        """Set shortlink URL"""
        user_id = query.from_user.id
        if await authoUser(query, user_id, owner_only=True):
            try:
                from database.database import get_token_settings
                current_settings = await get_token_settings()
                current_url = current_settings.get('shortlink_url', '') or "…¥·¥è·¥õ s·¥á·¥õ"
                
                set_msg = await client.ask(
                    chat_id=user_id,
                    text=(
                        f"üîó <b>s·¥á·¥õ s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥ú Ä ü</b>\n\n"
                        f"üìã <b>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ:</b> <code>{current_url}</code>\n"
                        f"üí° <b>…¥·¥á·¥° ·¥ú Ä ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:</b> <code>vplink.in</code>\n"
                        f"‚è∞ <i>·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ: 60 s·¥á·¥Ñ·¥è…¥·¥Ös</i>"
                    ),
                    timeout=60,
                    parse_mode=ParseMode.HTML
                )
                
                new_url = set_msg.text.strip()
                
                if not new_url or len(new_url) < 3:
                    return await set_msg.reply(
                        "‚ùå <b>…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ú Ä ü</b>\n\n"
                        "·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥ú Ä ü.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data="set_token_url")]
                        ])
                    )
                
                # Remove protocol if present
                new_url = new_url.replace('https://', '').replace('http://', '')
                
                from database.database import set_shortlink_url
                success = await set_shortlink_url(new_url)
                
                if success:
                    await set_msg.reply(
                        f"‚úÖ <b>·¥ú Ä ü ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n"
                        f"üîó <b>…¥·¥á·¥° ·¥ú Ä ü:</b>\n"
                        f"<blockquote><code>{new_url}</code></blockquote>",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è s·¥á·¥õ·¥õ…™…¥…¢s ‚Ä¢", callback_data="refresh_token_settings")]
                        ])
                    )
                else:
                    await set_msg.reply("‚ùå <b>“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥ú Ä ü</b>")
                
            except Exception as e:
                try:
                    await set_msg.reply(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> {e}")
                except:
                    await client.send_message(user_id, "‚è∞ <b>·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ!</b> ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")

    elif data == "set_token_key":
        """Set shortlink API key"""
        user_id = query.from_user.id
        if await authoUser(query, user_id, owner_only=True):
            try:
                from database.database import get_token_settings
                current_settings = await get_token_settings()
                current_key = current_settings.get('shortlink_key', '') or "…¥·¥è·¥õ s·¥á·¥õ"
                
                # Mask current key
                if current_key != "…¥·¥è·¥õ s·¥á·¥õ" and len(current_key) > 8:
                    masked_key = current_key[:4] + "*" * (len(current_key) - 8) + current_key[-4:]
                else:
                    masked_key = current_key
                
                set_msg = await client.ask(
                    chat_id=user_id,
                    text=(
                        f"üîë <b>s·¥á·¥õ ·¥Ä·¥ò…™ ·¥ã·¥á è</b>\n"
                        f"üìã <b>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ:</b> <code>{masked_key}</code>\n"
                        f"üí° <b>…¥·¥á·¥° ·¥ã·¥á è ·¥áx·¥Ä·¥ç·¥ò ü·¥á:</b> <code>8fa658d2ae...</code>\n"
                        f"‚ö†Ô∏è <i>·¥ã·¥á·¥á·¥ò …™·¥õ s·¥Ä“ì·¥á ‚Ä¢ ·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ: 60s</i>"
                    ),
                    timeout=60,
                    parse_mode=ParseMode.HTML
                )
                
                new_key = set_msg.text.strip()
                
                if not new_key or len(new_key) < 10:
                    return await set_msg.reply(
                        "‚ùå <b>…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ò…™ ·¥ã·¥á è</b>\n\n"
                        "·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ò…™ ·¥ã·¥á è (·¥Ä·¥õ  ü·¥á·¥Äs·¥õ 10 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs).",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data="set_token_key")]
                        ])
                    )
                
                from database.database import set_shortlink_key
                success = await set_shortlink_key(new_key)
                
                if success:
                    # Mask new key for display
                    display_key = new_key[:4] + "*" * (len(new_key) - 8) + new_key[-4:]
                    
                    await set_msg.reply(
                        f"‚úÖ <b>·¥Ä·¥ò…™ ·¥ã·¥á è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n"
                        f"üîë <b>…¥·¥á·¥° ·¥ã·¥á è:</b>\n"
                        f"<blockquote><code>{display_key}</code></blockquote>",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è s·¥á·¥õ·¥õ…™…¥…¢s ‚Ä¢", callback_data="refresh_token_settings")]
                        ])
                    )
                else:
                    await set_msg.reply("‚ùå <b>“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ä·¥ò…™ ·¥ã·¥á è</b>")
                
            except Exception as e:
                try:
                    await set_msg.reply(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> {e}")
                except:
                    await client.send_message(user_id, "‚è∞ <b>·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ!</b> ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")

    elif data == "set_token_expire":
        """Set verification expiry time"""
        user_id = query.from_user.id
        if await authoUser(query, user_id, owner_only=True):
            try:
                from database.database import get_token_settings
                from helper_func import get_exp_time
                
                current_settings = await get_token_settings()
                current_expire = current_settings.get('verify_expire', 86400)
                current_expire_text = get_exp_time(current_expire)
                
                set_msg = await client.ask(
                    chat_id=user_id,
                    text=(
                        f"‚è∞ <b>s·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥áx·¥ò…™ Ä è</b>\n"
                        f"üìã <b>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥áx·¥ò…™ Ä è:</b>\n"
                        f"üìã <b>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ:</b> {current_expire_text}\n"
                        f"üí° <b>…¥·¥á·¥° ·¥õ…™·¥ç·¥á (…™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös):</b>\n"
                        f"<code>3600</code> = 1  ú\n"
                        f"<code>86400</code> = 24 ú\n"
                        f"<code>604800</code> = 7·¥Ö\n"
                        f"‚è∞ <i>·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ: 60s</i>"
                    ),
                    timeout=60,
                    parse_mode=ParseMode.HTML
                )
                
                try:
                    new_expire = int(set_msg.text.strip())
                except ValueError:
                    return await set_msg.reply(
                        "‚ùå <b>…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä</b>\n\n"
                        "·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data="set_token_expire")]
                        ])
                    )
                
                if new_expire < 60 or new_expire > 2592000:  # 1 minute to 30 days
                    return await set_msg.reply(
                        "‚ùå <b>…™…¥·¥†·¥Ä ü…™·¥Ö  Ä·¥Ä…¥…¢·¥á</b>\n\n"
                        "·¥áx·¥ò…™ Ä è ·¥õ…™·¥ç·¥á ·¥ç·¥ús·¥õ  ô·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ 60 s·¥á·¥Ñ·¥è…¥·¥Ös (1 ·¥ç…™…¥) ·¥Ä…¥·¥Ö 2592000 s·¥á·¥Ñ·¥è…¥·¥Ös (30 ·¥Ö·¥Ä ès).",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data="set_token_expire")]
                        ])
                    )
                
                from database.database import set_verify_expire
                success = await set_verify_expire(new_expire)
                
                if success:
                    new_expire_text = get_exp_time(new_expire)
                    await set_msg.reply(
                        f"‚úÖ <b>·¥áx·¥ò…™ Ä è ·¥õ…™·¥ç·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n"
                        f"‚è∞ <b>…¥·¥á·¥° ·¥áx·¥ò…™ Ä è:</b>\n"
                        f"<blockquote>{new_expire_text}</blockquote>",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è s·¥á·¥õ·¥õ…™…¥…¢s ‚Ä¢", callback_data="refresh_token_settings")]
                        ])
                    )
                else:
                    await set_msg.reply("‚ùå <b>“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥áx·¥ò…™ Ä è ·¥õ…™·¥ç·¥á</b>")
                
            except Exception as e:
                try:
                    await set_msg.reply(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> {e}")
                except:
                    await client.send_message(user_id, "‚è∞ <b>·¥õ…™·¥ç·¥á·¥è·¥ú·¥õ!</b> ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")

    elif data == "new_verify_link":
        """Generate new verification link for user"""
        user_id = query.from_user.id
        await query.answer("üîÑ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ …¥·¥á·¥° ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã...", show_alert=False)
        
        try:
            from helper_func import create_verification_link, get_exp_time
            from database.database import get_token_settings
            
            # Get bot username
            bot_username = client.me.username
            base_url = f"https://t.me/{bot_username}"
            
            # Get token settings for expiry time
            token_settings = await get_token_settings()
            verify_expire = token_settings.get('verify_expire', 86400)
            expire_text = get_exp_time(verify_expire)
            
            # Create verification link
            verify_link, verify_token = await create_verification_link(user_id, base_url)
            
            if verify_link:
                link_text = (
                    f"üîó <b>…¥·¥á·¥° ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö!</b>\n"
                    f"üëã  ú…™ {query.from_user.first_name},  è·¥è·¥ú …¥·¥è·¥°  ú·¥Ä·¥†·¥á “ì Ä·¥á·¥á <b>{expire_text}</b> ·¥Ä·¥Ñ·¥Ñ·¥áss.\n\n"
                    f"‚úÖ <b>·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥†·¥á Ä…™“ì è & …¢·¥á·¥õ ·¥Ä·¥Ñ·¥Ñ·¥áss:</b>\n<code>{verify_link}</code>\n\n"
                    f"üìã <b> ú·¥è·¥° …™·¥õ ·¥°·¥è Ä·¥ãs:</b>\n"
                    f"1. ·¥ò Ä·¥áss <b>·¥†·¥á Ä…™“ì è …¥·¥è·¥°</b>\n"
                    f"2. ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥\n"
                    f"3. ·¥á…¥·¥ä·¥è è ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä <b>{expire_text}</b>\n\n"
                    f"‚è∞ <i> ü…™…¥·¥ã ·¥áx·¥ò…™ Ä·¥ás …™…¥ {expire_text}</i>\n"
                    f"üí° <i>·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥è Ä ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss</i>"
                )
                
                link_buttons = [
                    [InlineKeyboardButton("‚Ä¢ ·¥†·¥á Ä…™“ì è …¥·¥è·¥° ‚Ä¢", url=verify_link),
                    InlineKeyboardButton("‚Ä¢ …¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data="buy_prem")],
                    [InlineKeyboardButton("‚Ä¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á …¥·¥á·¥°  ü…™…¥·¥ã ‚Ä¢", callback_data="new_verify_link"),
                    InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close")]
                ]
            else:
                link_text = (
                    f"‚ùå <b>“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á  ü…™…¥·¥ã</b>\n\n"
                    f"·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã  Ä…™…¢ ú·¥õ …¥·¥è·¥°.\n\n"
                    f"üí° <b>·¥Ä ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á ·¥è·¥ò·¥õ…™·¥è…¥s:</b>\n"
                    f"‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ …™…¥ ·¥Ä “ì·¥á·¥° ·¥ç…™…¥·¥ú·¥õ·¥ás\n"
                    f"‚Ä¢ ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥è Ä …™…¥s·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥áss\n"
                    f"‚Ä¢ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™“ì …™ss·¥ú·¥á ·¥ò·¥á Äs…™s·¥õs"
                )
                
                link_buttons = [
                    [InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data="new_verify_link")],
                    [InlineKeyboardButton("‚Ä¢ …¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data="buy_prem")],
                    [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close")]
                ]
            
            try:
                await query.message.edit_text(
                    text=link_text,
                    reply_markup=InlineKeyboardMarkup(link_buttons),
                    parse_mode=ParseMode.HTML
                )
            except Exception:
                await query.message.edit_caption(
                    caption=link_text,
                    reply_markup=InlineKeyboardMarkup(link_buttons),
                    parse_mode=ParseMode.HTML
                )
                
        except Exception as e:
            print(f"Error generating new verify link: {e}")
            await query.answer("‚ùå ·¥á Ä Ä·¥è Ä …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  ü…™…¥·¥ã. ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", show_alert=True)

    elif data.startswith("like_") or data.startswith("dislike_"):
        """Handle like/dislike reactions"""
        user_id = query.from_user.id
        
        # Extract message ID and reaction type
        if data.startswith("like_"):
            message_id = int(data.replace("like_", ""))
            reaction_type = "like"
            reaction_emoji = "‚ù§Ô∏è"
        else:
            message_id = int(data.replace("dislike_", ""))
            reaction_type = "dislike"
            reaction_emoji = "üíî"
        
        try:
            from database.database import add_reaction, get_message_stats, get_user_reaction
            
            # Check if user already reacted
            current_reaction = await get_user_reaction(message_id, user_id)
            
            if current_reaction == reaction_type:
                await query.answer(f" è·¥è·¥ú ·¥Ä ü Ä·¥á·¥Ä·¥Ö è {reaction_type}·¥Ö ·¥õ ú…™s!", show_alert=True)
                return
            
            # Add/update reaction
            success = await add_reaction(message_id, user_id, reaction_type)
            
            if success:
                # Get updated stats
                likes, dislikes = await get_message_stats(message_id)

                is_admin = user_id == OWNER_ID or await admin_exist(user_id)

                if is_admin:
                    updated_buttons = [
                        [
                            InlineKeyboardButton(f"‚ù§Ô∏è {likes}", callback_data=f"like_{message_id}"),
                            InlineKeyboardButton(f"üíî {dislikes}", callback_data=f"dislike_{message_id}"),
                            InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data=f"stats_{message_id}")
                        ]
                    ]
                else:
                    updated_buttons = [
                        [
                            InlineKeyboardButton(f"‚ù§Ô∏è  {likes}", callback_data=f"like_{message_id}"),
                            InlineKeyboardButton(f"üíî {dislikes}", callback_data=f"dislike_{message_id}")
                    ]
                ]
                
                try:
                    await query.edit_message_reply_markup(
                        reply_markup=InlineKeyboardMarkup(updated_buttons)
                    )
                    await query.answer(f"{reaction_emoji}  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö!")
                except Exception as e:
                    await query.answer(f"{reaction_emoji}  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö!")
            else:
                await query.answer("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥", show_alert=True)
                
        except Exception as e:
            print(f"Error handling reaction: {e}")
            await query.answer("‚ùå ·¥á Ä Ä·¥è Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥", show_alert=True)

    elif data.startswith("stats_"):
        """Show detailed stats for message reactions"""
        message_id = int(data.replace("stats_", ""))
        
        try:
            from database.database import get_message_stats
            likes, dislikes = await get_message_stats(message_id)
            
            total_reactions = likes + dislikes
            like_percentage = (likes / total_reactions * 100) if total_reactions > 0 else 0
            dislike_percentage = (dislikes / total_reactions * 100) if total_reactions > 0 else 0
            
            stats_text = (
                f"üìä ·¥ç·¥áss·¥Ä…¢·¥á  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥ s·¥õ·¥Ä·¥õs\n\n"
                f"üëç  ü…™·¥ã·¥ás:  {likes} ({like_percentage:.1f}%)\n"
                f"üëé ·¥Ö…™s ü…™·¥ã·¥ás:  {dislikes} ({dislike_percentage:.1f}%)\n"
                f"üìà ·¥õ·¥è·¥õ·¥Ä ü: {total_reactions}  Ä·¥á·¥Ä·¥Ñ·¥õ…™·¥è…¥s\n\n"
                f"{'üî• ·¥ò·¥ès…™·¥õ…™·¥†·¥á  Ä·¥ás·¥ò·¥è…¥s·¥á!' if likes > dislikes else 'üòê ·¥ç…™x·¥á·¥Ö  Ä·¥ás·¥ò·¥è…¥s·¥á' if likes == dislikes else 'üëé …¥·¥á…¢·¥Ä·¥õ…™·¥†·¥á  Ä·¥ás·¥ò·¥è…¥s·¥á'}"
            )
            
            await query.answer(stats_text, show_alert=True)
            
        except Exception as e:
            print(f"Error showing stats: {e}")
            await query.answer("‚ùå ·¥á Ä Ä·¥è Ä  ü·¥è·¥Ä·¥Ö…™…¥…¢ s·¥õ·¥Ä·¥õs", show_alert=True)
